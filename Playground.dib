#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

Console.WriteLine("Hi =)")

#!markdown

Just a new test

#!csharp

#!import "./Product.cs"
#r "nuget:NewtonSoft.Json"
using Newtonsoft.Json;

var product = new Product("Apple", new DateTime(2008, 12, 28), new[] { "Small", "Medium", "Large" });

string json = JsonConvert.SerializeObject(product);
product.Display();
json.Display();

#!csharp

using Newtonsoft.Json;

var product = new Product("Apple", new DateTime(2008, 12, 28), new[] { "Small", "Medium", "Large" });

string json = JsonConvert.SerializeObject(product);
Console.WriteLine(json);

#!csharp

using Microsoft.DotNet.Interactive;

var input = await Kernel.GetInputAsync("Enter a number", typeHint: "file");

input.Display();

#!markdown

Magic Commands:

#!markdown

https://github.com/dotnet/interactive/blob/main/docs/magic-commands.md

#!markdown

### Tutorial
Link: https://github.com/dotnet/interactive/tree/main/docs

#!csharp

#!import "./Models.cs"
using System.Net.Http;
using System.Threading.Tasks;


// Print the result.
Console.WriteLine($"Bitcoin rate in USD: {result.bpi.USD.rate}");

result.Display();

#!csharp

#!import "./Models.cs"
#!import "./Service.cs"

var service = new ApiService();

var result = await service.GetBitcoinPrice();
result.Display();

#!markdown

This is the code...

#!csharp

#r "nuget: XPlot.Plotly.Interactive"

using XPlot.Plotly;

var barChart = new Bar
{
    x = new[] { "giraffes", "orangutans", "monkeys" },
    y = new[] { 20, 14, 23 }
};

var lineChart = new Scatter
{
    x = new[] {1, 2, 3, 4, 5 },
    y = new[] {1, 4, 9, 16, 25 },
    mode = "lines",
    name = "my line chart"
};

var chart = Chart.Plot(barChart);
chart.WithTitle("Bar Chart");

var chart2 = Chart.Plot(lineChart);
chart2.WithTitle("Line Chart");

chart.Display();
chart2.Display();
